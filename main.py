import os
import logging
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from flask import Flask, request
import threading

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
API_KEY = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
form_url = "https://airtable.com/app20FIZVkuqrfYCG/pagi3f25jJR4rmWeg/form"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
@app.route('/' + API_KEY, methods=["POST"])
def webhook():
    json_str = request.get_data(as_text=True)
    update = Update.de_json(json_str, application.bot)
    application.process_update(update)
    return "OK", 200

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=8000)

threading.Thread(target=run_flask, daemon=True).start()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat:
        print("‚ùå –û—à–∏–±–∫–∞: update.effective_chat = None")
        return

    chat_id = chat.id
    chat_type = chat.type  # –¢–∏–ø —á–∞—Ç–∞ (group, supergroup, private)

    print(f"üìå –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ {chat_id} (—Ç–∏–ø: {chat_type})")

    if chat_type in ["group", "supergroup"]:
        if chat_id == GROUP_ID:
            print("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!")
            keyboard = [[InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ —Ä–µ–π—Å–µ", url=form_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –ü—Ä–∏–≤–µ—Ç, —á–ª–µ–Ω –≥—Ä—É–ø–ø—ã! –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        else:
            print(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! (–ß–∞—Ç ID: {chat_id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å {GROUP_ID})")
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    else:
        print(f"üö´ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –≤ –õ–ò–ß–ù–û–ú —á–∞—Ç–µ (ID: {chat_id}). –û–¢–ö–ê–ó–ê–ù–û!")
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
    global application
    application = Application.builder().token(API_KEY).build()

    application.add_handler(CommandHandler("start", start))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    application.bot.set_webhook(f"certain-ardelis-novagroup-1a591a04.koyeb.app/{API_KEY}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä (–æ–±—Ä–∞–±–æ—Ç–∫—É webhook)
    run_flask()

if __name__ == '__main__':
    main()
