import os
from dotenv import load_dotenv

load_dotenv()

from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update

# üîë –¢–≤–æ–π API-–∫–ª—é—á –æ—Ç BotFather
API_KEY = os.getenv("BOT_TOKEN")

# üîí ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω (–∑–∞–º–µ–Ω–∏ –Ω–∞ ID —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã)
GROUP_ID = int(os.getenv("GROUP_ID"))  # –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

# üìå –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É Airtable (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É)
form_url = "https://airtable.com/app20FIZVkuqrfYCG/pagi3f25jJR4rmWeg/form"

# üì© –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat:
        print("‚ùå –û—à–∏–±–∫–∞: update.effective_chat = None")
        return

    chat_id = chat.id
    chat_type = chat.type  # –¢–∏–ø —á–∞—Ç–∞ (group, supergroup, private)

    print(f"üìå –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ {chat_id} (—Ç–∏–ø: {chat_type})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π
    if chat_type in ["group", "supergroup"]:
        if chat_id == ALLOWED_GROUP_ID:
            print("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!")
            keyboard = [[InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ —Ä–µ–π—Å–µ", url=form_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –ü—Ä–∏–≤–µ—Ç, —á–ª–µ–Ω –≥—Ä—É–ø–ø—ã! –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        else:
            print(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! (–ß–∞—Ç ID: {chat_id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å {ALLOWED_GROUP_ID})")
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

    else:
        print(f"üö´ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –≤ –õ–ò–ß–ù–û–ú —á–∞—Ç–µ (ID: {chat_id}). –û–¢–ö–ê–ó–ê–ù–û!")
        await context.bot.send_message(chat_id=chat_id, text="‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!")

# üìå –ö–æ–º–∞–Ω–¥–∞ /get_id (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π ID –±–æ—Ç –≤–∏–¥–∏—Ç)
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat:
        await context.bot.send_message(chat_id=chat.id, text=f"üìå ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: {chat.id}")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ID –≥—Ä—É–ø–ø—ã: {chat.id}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å Replit

def main():
    application = Application.builder().token(API_KEY).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("get_id", get_id))

    application.run_polling()

if __name__ == '__main__':
    main()
